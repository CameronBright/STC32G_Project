C251 COMPILER V5.60.0,  ADC                                                                31/07/23  21:13:12  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE ADC
OBJECT MODULE PLACED IN ADC.obj
COMPILER INVOKED BY: D:\Software\Worksoftware\Keil5_C251\C251\BIN\C251.EXE ADC\ADC.c XSMALL INTR2 WARNINGLEVEL(1) BROWSE
                    - INCDIR(.\OLED;.\timer;.\GPIO;.\PWM;.\Encoders;.\iic;.\Uart;.\Menu;.\motor;.\ADC;.\LineFollower;.\MPU6050;.\Key) DEBUG P
                    -RINT(.\ADC.lst) TABS(2) OBJECT(ADC.obj) 

stmt  level    source

    1          #include "ADC.h"
    2          
    3          void ADC_Init(void)   
    4          {
    5   1        ADCTIM = 0x3f; //设置ADC内部时序
    6   1        ADCCFG = 0x23; //数据右对齐  设置ADC时钟为系统时钟12/2/3
    7   1        ADC_CONTR = 0xf0;          //使能第一个通道P1.0   
    8   1        ADC_POWER = 1; //使能ADC模块
    9   1      }
   10          
   11          void ADC_Read(uint *channel1, uint *channel2, uint *channel3)  //ADC读
   12          {                           //
   13   1        uint value = 0;  //ADC数值保存变量
   14   1        uchar Switching_channel = 0;
   15   1      
   16   1        ADC_START = 1;         //启动AD转化
   17   1        _nop_();              //空指令
   18   1        _nop_();             //空指令
   19   1        
   20   1        while(!ADC_FLAG);   //等待ADC转换结束
   21   1        ADC_FLAG = 0;
   22   1        
   23   1        value = ((ADC_RES << 8) + ADC_RESL); //计算ADC的数值
   24   1        
   25   1        Switching_channel++;
   26   1        switch(Switching_channel)
   27   1        {
   28   2          case 1:
   29   2          {
   30   3            ADC_CONTR = ADC_CONTR + 0x01;          //使能第一个通道P1.1 
   31   3            
   32   3            *channel1 = value;
   33   3          }
   34   2          break;
   35   2          case 2:
   36   2          {
   37   3            ADC_CONTR = ADC_CONTR & 0xf0 | 0x08;    //使能第一个通道P0.0
   38   3            *channel2 = value;
   39   3          } 
   40   2          break;
   41   2          case 3:
   42   2          {
   43   3            ADC_CONTR = ADC_CONTR & 0xf0;   //重新回到通道P1.0
   44   3            *channel3 = value;
   45   3            Switching_channel = 0;
   46   3          }
   47   2          break;
   48   2        }
   49   1      }
   50          
   51          uint ADC_Readchannel_1(void)
   52          {
   53   1        uint value = 0;  //ADC数值保存变量
   54   1        
   55   1        ADC_CONTR = ADC_CONTR + 0x01;          //使能第一个通道P1.1 
   56   1        
   57   1      
C251 COMPILER V5.60.0,  ADC                                                                31/07/23  21:13:12  PAGE 2   

   58   1        ADC_START = 1;         //启动AD转化
   59   1        _nop_();              //空指令
   60   1        _nop_();             //空指令
   61   1        
   62   1        while(!ADC_FLAG);   //等待ADC转换结束
   63   1        ADC_FLAG = 0;
   64   1        
   65   1        value = ((ADC_RES << 8) + ADC_RESL); //计算ADC的数值
   66   1        return value;
   67   1      }
   68          
   69          uint ADC_Readchannel_2(void)
   70          {
   71   1        uint value = 0;  //ADC数值保存变量
   72   1        
   73   1        ADC_CONTR = ADC_CONTR & 0xf0 | 0x08;    //使能第一个通道P0.0
   74   1      
   75   1        ADC_START = 1;         //启动AD转化
   76   1        _nop_();              //空指令
   77   1        _nop_();             //空指令
   78   1        
   79   1        while(!ADC_FLAG);   //等待ADC转换结束
   80   1        ADC_FLAG = 0;
   81   1        
   82   1        value = ((ADC_RES << 8) + ADC_RESL); //计算ADC的数值
   83   1        return value;
   84   1      }
   85          
   86          uint ADC_Readchannel_3(void)
   87          {
   88   1        uint value = 0;  //ADC数值保存变量
   89   1        
   90   1        ADC_CONTR = ADC_CONTR & 0xf0;   //重新回到通道P1.0
   91   1      
   92   1        ADC_START = 1;         //启动AD转化
   93   1        _nop_();              //空指令
   94   1        _nop_();             //空指令
   95   1        
   96   1        while(!ADC_FLAG);   //等待ADC转换结束
   97   1        ADC_FLAG = 0;
   98   1        
   99   1        value = ((ADC_RES << 8) + ADC_RESL); //计算ADC的数值
  100   1        return value;
  101   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       155     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------          4
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
