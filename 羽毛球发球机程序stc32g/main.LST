C251 COMPILER V5.60.0,  main                                                               04/08/23  19:36:15  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Software\Worksoftware\Keil5_C251\C251\BIN\C251.EXE main.c XSMALL INTR2 WARNINGLEVEL(1) BROWSE IN
                    -CDIR(.\OLED;.\timer;.\GPIO;.\PWM;.\Encoders;.\iic;.\motor;.\ADC;.\LineFollower;.\MPU6050;.\Key;.\Wave;.\Uart;.\SYN6288) 
                    -DEBUG TABS(2) 

stmt  level    source

    1          /*
    2          program versions : 2.3.1
    3          
    4          完美版本，用p值、d值就已经可以丝滑循迹
    5          
    6          modification: 2023/8/1 14:38
    7          
    8          modifier: Cameron Bright
    9          
   10          */
   11          #include "timer.h"   //定时器
   12          #include "oled.h"   //OLED函数
   13          #include "GPIO.h"   //GPIO
   14          #include "key.h"    //按键
   15          #include "Uart.h"   //串口
   16          #include "stdio.h"  //c标准库
   17          #include "motor.h"  //电机
   18          #include "LineFollower.h" //循迹模块
   19          #include "MPU6050.h"//mpu6050
   20          #include "MATH.H"   //数学运算模块
   21          
   22          //=================================
   23          
   24          #include "pwm_init.h"  //pwm
   25          #include "Wave.h"      //超声波
   26          
   27          //-------------------------------- system--------------------------------
   28          extern uint s_count;         //定时器计数
   29          extern uint delay_cnt;       //delay计数
   30          uint sys_led = 0;            //运行状态灯
   31          
   32          uint disp_delay;             //显示屏刷新延时计数
   33          uint motor_delay;            //电机函数刷新延时计数
   34          uint mpu6050_delay;          //mpu6050读取延时计数
   35          uint key_delay;              //案件延时刷新计数
   36          
   37          //----------------- motor(电机驱动和PID变量)--------------------------------
   38          //extern int dutyL;            //左边电机驱动pwm 周期1000
   39          //extern int dutyR;            //右
   40          
   41          //=======================================================================
   42          //******************************
   43          extern int Left_moto1     ;//左风机PWM
   44          extern int Right_moto2    ;//右
   45          extern int Forwar_dmoto1  ;//前
   46          extern int Backward_moto2 ;//后
   47          
   48          
   49          //======================================================================
   50          uchar motor_sw = 1;//电机开关
   51          
   52          struct pid_parameter positionPID; //PID参数
   53          int err_kp, err_ki, err_kd;   //误差值
   54          char line_inaccuracy; //循迹模块偏移量
   55          char old_line_inaccuracy;//上一次循迹模块的便宜量
   56          char old_position;    //上一次的数据
   57          
C251 COMPILER V5.60.0,  main                                                               04/08/23  19:36:15  PAGE 2   

   58          //------------------MPU6050-----------------------------------------------
   59          //===================获取数据========================================================
   60          
   61          
   62          extern float Angle_gx=0,Angle_gy=0,Angle_gz=0;    //由角速度计算的角速率(角度制)
   63          extern float Angle_ax=0,Angle_ay=0,Angle_az=0;    //由加速度计算的加速度(弧度制)
   64          float edata  Last_Angle_gx=0;         //外环PI输出量  上一次陀螺仪数据
   65          float edata Last_Angle_gy=0;
   66          
   67          int   edata g_x=0,g_y=0,g_z=0;          //陀螺仪矫正参数
   68          float edata a_x=0,a_y=0,a_z=0;              //角度矫正参数
   69          
   70          extern int X_Result=0,Y_Result=0,Z_Result=0;            //加入偏差值 
   71          
   72          unsigned char tp[16];   //读MP6050缓冲
   73          //-----------------other--------------------------------------------------
   74          uchar txbuf[20]; //串口发送缓存
   75          
   76          uchar oled_showtext[25]; //oled显示字符串
   77          
   78          void Disp_refresh(void);  //数码管显示函数
   79          void Motor_control(void); //电机控制函数
   80          void MPU6050_Read(void);  //陀螺仪数据采集
   81          void Key_Proc(void);
   82          
   83          //*****************按键***********//
   84          
   85          unsigned char key_old = 0;
   86          unsigned char key_value = 0;
   87          unsigned char key_Down = 0;
   88          unsigned char key_up = 0;
   89          
   90          extern unsigned int PWMB_CCR5;
   91          extern unsigned int PWMB_CCR6;
   92          extern unsigned int PWMB_CCR7;
   93          extern unsigned int PWMB_CCR8;
   94          
   95          //*******超声波*****//
   96          unsigned char Wave = 0;
   97          unsigned char Wave_Buff[20];
   98          extern unsigned long TF_Count;
   99          
  100          //循迹启动按键
  101          unsigned char T_S_B = 0;  //启动循迹按键
  102          unsigned char flag = 0;
  103          unsigned char flag_count = 0;
  104          unsigned char Tracking_value = 0;  //循迹值
  105          extern int dutyL; //左轮
  106          extern int dutyR; //右轮
  107          
  108          void main()
  109          {
  110   1        GPIO_init();//GPIO初始化
  111   1        OLED_Init();//oled初始化
  112   1        OLED_ColorTurn(0);//0正常显示，1 反色显示
  113   1        OLED_DisplayTurn(0);//0正常显示 1 屏幕翻转显示
  114   1        OLED_Clear();//oled清屏
  115   1        Timer0Init();//定时器 0 初始化
  116   1        Timer1_Init(); //定时器 1 初始化
  117   1        Timer3_Init();//定时器 3 初始化
  118   1        Uart1_Init();// 串口1初始化
  119   1        S1_S0=0; S1_S1=0;//串口1 选择P30 P31  
  120   1        P54RST=1;//复位初始化
  121   1        InitMPU6050(); //mpu6050初始化
  122   1        Motor_Init(); //电机初始化
  123   1        //PID参数
C251 COMPILER V5.60.0,  main                                                               04/08/23  19:36:15  PAGE 3   

  124   1        positionPID.basicSpeed = 600;//基础运动速度
  125   1        positionPID.kp = 400;
  126   1        positionPID.ki = 0;
  127   1        positionPID.kd = 20;
  128   1        
  129   1        while(1)
  130   1        {
  131   2          Disp_refresh();
  132   2          MPU6050_Read();
  133   2          Motor_control();
  134   2          Key_Proc();
  135   2        }
  136   1      }
  137          
  138          //定时器0中断函数
  139          
  140          void Timer0() interrupt 1
  141          {
  142   1        TF_Count += 1;
  143   1      }
  144          
  145          
  146          //-----------------定时器1-----------------------------------
  147          void timer1() interrupt 3       //100us中断一次
  148          {
  149   1        if(++disp_delay == 100) disp_delay = 0;       //显示屏刷新时间
  150   1        if(++motor_delay == 10) motor_delay = 0;      //电机控制刷新时间
  151   1        if(++mpu6050_delay == 50) mpu6050_delay = 0;  //mpu6050执行刷新时间
  152   1        if(++key_delay == 10) key_delay = 0;        //按键扫描刷新时间
  153   1        
  154   1        if(++sys_led >= 5000)                         
  155   1        {
  156   2          sys_led = 0;
  157   2        }
  158   1      } 
  159          
  160          
  161          void Timer3_Isr(void) interrupt 19   //等待测试 1ms
  162          {
  163   1        if(flag == 1)         
  164   1        {
  165   2          flag_count++;
  166   2          if(flag_count > 100)
  167   2          {
  168   3            Tracking_value ++;   //循迹次数
  169   3            flag_count = 0;
  170   3            flag = 0;
  171   3          }
  172   2        }
  173   1      }
  174          
  175          
  176          
  177          //-----------------按键处理-----------------------------------
  178          
  179          void Key_Proc(void)
  180          {
  181   1      //  if(key_delay) return; //100ms扫描一次按键
  182   1      //    key_delay = 1;
  183   1        
  184   1        key_value = Key_Rvalue();//读取按键按下的编号
  185   1        key_Down = key_value & (key_old ^ key_value); 
  186   1        key_up = ~key_value & (key_old ^ key_value);    
  187   1        key_old = key_value;  
  188   1        
  189   1        switch(key_Down)
C251 COMPILER V5.60.0,  main                                                               04/08/23  19:36:15  PAGE 4   

  190   1        {
  191   2          case 1:
  192   2          PWMB_CCR5 += 50;
  193   2          Update_5(PWMB_CCR5);
  194   2          if(PWMB_CCR5 > 1000)
  195   2            PWMB_CCR5 = 300;
  196   2          break;
  197   2          case 2:
  198   2          PWMB_CCR6 += 50;  
  199   2          Update_6(PWMB_CCR6);
  200   2          if(PWMB_CCR6 > 1000)
  201   2            PWMB_CCR6 = 300;
  202   2          break;
  203   2          case 3:
  204   2          PWMB_CCR7 += 50;
  205   2          Update_7(PWMB_CCR7);
  206   2          if(PWMB_CCR7 > 1000)
  207   2            PWMB_CCR7 = 300;
  208   2          break;
  209   2          case 4:
  210   2          PWMB_CCR8 += 50;
  211   2          Update_8(PWMB_CCR8);
  212   2          if(PWMB_CCR8 > 1000)
  213   2            PWMB_CCR8 = 300;
  214   2          break;
  215   2        }
  216   1      }
  217          
  218          //-----------------显示屏函数-----------------------------------
  219          void Disp_refresh(void)
  220          {
  221   1      //  if(disp_delay) return; //10ms刷新一次屏幕
  222   1      //  disp_delay = 1;
  223   1        
  224   1      //    sprintf(oled_showtext,"line:%2d  ",line_inaccuracy);
  225   1      //  OLED_Display_string_5x7(0,0,oled_showtext);
  226   1      //  
  227   1      ////    sprintf(oled_showtext,"L:%3d,R%3d ",dutyL,dutyR);
  228   1      ////  OLED_Display_string_5x7(0,2,oled_showtext);
  229   1      //  
  230   1      //    sprintf(oled_showtext,"basic:%3d ",positionPID.basicSpeed);
  231   1      //  OLED_Display_string_5x7(0,4,oled_showtext);
  232   1      //  
  233   1      //    sprintf(oled_showtext,"Z:%5d  ",(int)Z_Result);
  234   1      //  OLED_Display_string_5x7(0,6,oled_showtext);
  235   1      //  
  236   1      //  
  237   1      //    sprintf(oled_showtext,"p:%4d,d:%4d",(int)positionPID.kp,(int)positionPID.kd);
  238   1      //  OLED_Display_string_5x7(64,0,oled_showtext);
  239   1      //  
  240   1      //    sprintf(oled_showtext,"R: %5d ",(int)X_Result);
  241   1      //  OLED_Display_string_5x7(64,2,oled_showtext);
  242   1      //  
  243   1      //    sprintf(oled_showtext,"Y: %5d ",(int)Y_Result);
  244   1      //  OLED_Display_string_5x7(64,4,oled_showtext);
  245   1      //  
  246   1      //    sprintf(oled_showtext,"Y: %5d ",(int)flag_count);
  247   1      //  OLED_Display_string_5x7(64,7,oled_showtext);
  248   1      
  249   1          sprintf(oled_showtext,"P42 5: %5d ",PWMB_CCR5);
  250   1          OLED_Display_string_5x7(0,0,oled_showtext);
  251   1          sprintf(oled_showtext,"P41 6: %5d ",PWMB_CCR6);
  252   1          OLED_Display_string_5x7(0,2,oled_showtext);
  253   1          sprintf(oled_showtext,"P73 7: %5d ",PWMB_CCR7);
  254   1          OLED_Display_string_5x7(0,4,oled_showtext);
  255   1          sprintf(oled_showtext,"P70 8: %5d ",PWMB_CCR8);
C251 COMPILER V5.60.0,  main                                                               04/08/23  19:36:15  PAGE 5   

  256   1          OLED_Display_string_5x7(0,6,oled_showtext);
  257   1      }
  258          
  259          
  260          //-------------陀螺仪控制函数----------------------------------------
  261          //相关变量
  262          
  263          //------------
  264          void MPU6050_Read(void)
  265          {
  266   1        if(mpu6050_delay) return; 
  267   1        mpu6050_delay = 1;
  268   1        
  269   1          //********************************************************************************************
  270   1          Read_MPU6050(tp); // 720us @24MHz
  271   1      
  272   1          Angle_ax = ((float)(((int *)&tp)[0])) / 8192.0; //加速度处理  结果单位是 +- g
  273   1          Angle_ay = ((float)(((int *)&tp)[1])) / 8192.0; //转换关系  8192 LSB/g, 1g对应读数8192
  274   1          Angle_az = ((float)(((int *)&tp)[2])) / 8192.0; //加速度量程 +-4g/S
  275   1          Last_Angle_gx = Angle_gx;   //储存上一次角速度数据
  276   1          Last_Angle_gy = Angle_gy;
  277   1          Angle_gx = ((float)(((int *)&tp)[4] - g_x)) / 65.5; //陀螺仪处理  结果单位是 +-度
  278   1          Angle_gy = ((float)(((int *)&tp)[5] - g_y)) / 65.5; //陀螺仪量程 +-500度/S, 1度/秒 对应读数 65.536
  279   1          Angle_gz = ((float)(((int *)&tp)[6] - g_z)) / 65.5; //转换关系65.5 LSB/度
  280   1      
  281   1      
  282   1          //**********************************X轴指向************************************************
  283   1          X_Result  = Angle_ax * 100 ;    //处理过的数值减去偏差值
  284   1          //**************Y轴指向**************************************************
  285   1          Y_Result  = Angle_ay * 100;   //处理过的数值减去偏差值
  286   1          //**************Z轴指向*****************************  
  287   1          Z_Result = Angle_az * 100;
  288   1      
  289   1      
  290   1          //==============================================================
  291   1              
  292   1      //    Uart1_sendbyte(0x03);
  293   1      //    Uart1_sendbyte(~0x03);
  294   1      //    
  295   1      //    Uart1_sendbyte((int)(X_Result*100));
  296   1      //    Uart1_sendbyte((int)(X_Result*100)>>8);
  297   1      //    Uart1_sendbyte((int)(Y_Result*100));
  298   1      //    Uart1_sendbyte((int)(Y_Result*100)>>8);
  299   1      //    Uart1_sendbyte((int)(Z_Result*100));
  300   1      //    Uart1_sendbyte((int)(Z_Result*100)>>8);
  301   1      //    
  302   1      //    Uart1_sendbyte(~0x03);
  303   1      //    Uart1_sendbyte(0x03);
  304   1             
  305   1          //========================= 
  306   1      }
  307          
  308          
  309          
  310          
  311          
  312          //-----------------电机控制函数-------------------------------------
  313          void Motor_control(void)
  314          {
  315   1        if(motor_delay) return; //延时
  316   1        motor_delay = 1;
  317   1        
  318   1        line_inaccuracy = ReadLine();//读取循线状态 1、-1、0
*** WARNING C140 IN LINE 318 OF main.c: 'ReadLine' undefined; assuming 'extern int ReadLine()'
  319   1        
  320   1        if(line_inaccuracy > 2 || line_inaccuracy < -2)
C251 COMPILER V5.60.0,  main                                                               04/08/23  19:36:15  PAGE 6   

  321   1        {
  322   2          if(line_inaccuracy == -3)//传感器远离地面时
  323   2            motor_sw = 1;           //电机正转
  324   2          else if(line_inaccuracy == 3) //所有传感器都在地面但没识别到线时
  325   2            line_inaccuracy = old_position;
  326   2        }
  327   1        else 
  328   1        {
  329   2          motor_sw = 1;//电机正常工作
  330   2          old_position = line_inaccuracy;//记录上一次的位置
  331   2        }
  332   1        
  333   1        err_kp = positionPID.kp * line_inaccuracy;     //循迹模块数据
  334   1        err_ki = positionPID.ki * line_inaccuracy;     //积分
  335   1        err_kd = positionPID.kd * old_line_inaccuracy; //微分
  336   1        
  337   1        if(line_inaccuracy)
  338   1        {
  339   2          dutyR = positionPID.basicSpeed + err_kp + err_kd; 
  340   2          dutyL = positionPID.basicSpeed - err_kp - err_kd;
  341   2        }
  342   1        else 
  343   1        {
  344   2          dutyR = positionPID.basicSpeed;
  345   2          dutyL = positionPID.basicSpeed;
  346   2        }
  347   1      
  348   1        Update_duty(motor_sw,dutyR,dutyL);//更新PWM输出
  349   1        old_line_inaccuracy = line_inaccuracy;
  350   1      }
  351          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1117     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       180     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       228     ------
End of Module Information.


C251 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
