C251 COMPILER V5.60.0,  main                                                               26/07/23  23:46:39  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Software\Worksoftware\Keil5_C251\C251\BIN\C251.EXE main.c XSMALL INTR2 WARNINGLEVEL(1) BROWSE IN
                    -CDIR(.\OLED;.\timer;.\GPIO;.\PWM;.\Encoders;.\iic;.\Uart;.\Menu;.\motor;.\ADC;.\LineFollower;.\MPU6050) DEBUG TABS(2) 

stmt  level    source

    1          #include "timer.h"   //定时器
    2          #include "oled.h"   //OLED函数
    3          #include "GPIO.h"   //GPIO
    4          #include "pwm.h"      //pwm
    5          #include "Encoders.h"  //旋转编码器
    6          #include "iic.h"
    7          #include "Uart.h"   //串口
    8          #include "stdio.h"
    9          #include "Meun.h"
   10          #include "motor.h"
   11          #include "ADC.h"
   12          #include "LineFollower.h" //循迹模块
   13          #include "stdio.h"
   14          #include "MPU6050.h"
   15          #include "MATH.H"
   16          
   17          //-------------------------------- system--------------------------------
   18          extern uint s_count;         //定时器计数
   19          extern uint delay_cnt;       //delay计数
   20          uint timer_delay = 0;        //1us tick
   21          
   22          uint disp_delay;             //显示屏刷新延时计数
   23          uint motor_delay;            //电机函数刷新延时计数
   24          uint mpu6050_delay;          //mpu6050读取延时计数
   25          
   26          //----------------- motor(电机驱动和PID变量)--------------------------------
   27          extern int dutyL;            //左边电机驱动pwm 周期1000
   28          extern int dutyR;            //右
   29          
   30          uchar motor_sw = 1;//电机开关
   31          
   32          struct pid_parameter positionPID; //PID参数
   33          char line_inaccuracy; //循迹模块偏移量
   34          char old_position;    //上一次的数据
   35          
   36          //------------------MPU6050-----------------------------------------------
   37          
   38          int Gyro_x, Gyro_y, Gyro_z;                        //三轴陀螺仪
   39          int Gyro_x_, Gyro_y_, Gyro_z_;                        //三轴陀螺仪滤波
   40          
   41          int Gyro_angle_x=0, Gyro_angle_y=0, Gyro_angle_z=0;
   42          int Acc_x, Acc_y, Acc_z;                           //三轴加速度
   43          int Temp;                                        //温度
   44          
   45          int   xdata g_x=0,g_y=0,g_z=0;                   //陀螺仪矫正参数
   46          float xdata a_x=0,a_y=0;                         //角度矫正参数
   47          float data  AngleX=0, AngleY=0, AngleZ=0;          //四元数解算出的欧拉角
   48          float xdata Angle_gx=0, Angle_gy=0, Angle_gz=0;    //由角速度计算的角速率(角度制)
   49          float xdata Angle_ax=0, Angle_ay=0, Angle_az=0;    //由加速度计算的加速度(弧度制)
   50          
   51          uchar MPU6050_DATA[14];
   52          
   53          unsigned  int Angle_of_pitch = 0;
   54          unsigned  int Roll_Angle = 0;
   55          
   56          #define pi    3.14159265f                           
   57          #define Kp    0.8f                        
   58          #define Ki    0.001f                         
C251 COMPILER V5.60.0,  main                                                               26/07/23  23:46:39  PAGE 2   

   59          #define halfT 0.004f  
   60          
   61          float idata q0=1,q1=0,q2=0,q3=0;   
   62          float idata exInt=0,eyInt=0,ezInt=0;  
   63          
   64          void IMUupdate(float gx, float gy, float gz, float ax, float ay, float az);
   65          
   66          //-----------------other--------------------------------------------------
   67          uchar txbuf[20]; //串口发送缓存
   68          
   69          uchar oled_showtext[25]; //oled显示字符串
   70          
   71          void Disp_refresh(void);  //数码管显示函数
   72          void Motor_control(void); //电机控制函数
   73          void MPU6050_Read(void);  //陀螺仪数据采集
   74          
   75          void main()
   76          {
   77   1        GPIO_init();//GPIO初始化
   78   1        OLED_Init();//oled初始化
   79   1        OLED_ColorTurn(0);//0正常显示，1 反色显示
   80   1        OLED_DisplayTurn(1);//0正常显示 1 屏幕翻转显示
   81   1        OLED_Clear();//oled清屏
   82   1        
   83   1        Timer1Init();//定时器初始化
   84   1        
   85   1        UartInit();//串口初始化 
   86   1        S1_S0=0;
   87   1        S1_S1=0;//串口1 选择P30 P31 
   88   1        
   89   1        P54RST=1;//复位初始化
   90   1        
   91   1        InitMPU6050(); //mpu6050初始化
   92   1        
   93   1        Motor_Init(); //电机初始化
   94   1        positionPID.basicSpeed = 400;//基础运动速度
   95   1        
   96   1        while(1)
   97   1        { 
   98   2          Motor_control(); //电机控制函数
   99   2          Disp_refresh();  //显示屏刷新函数
  100   2          MPU6050_Read();  //陀螺仪数据采集
  101   2          
  102   2          //sprintf(txbuf,"1:%04d 2:%04d 3:%04d\r\n",ADCP1,ADCP2,ADCP3);
  103   2          //Uart_String(txbuf); //串口
  104   2        }
  105   1      }
  106          void timer1() interrupt 3       //100us中断一次
  107          {
  108   1        if(++disp_delay == 100) disp_delay = 0;
  109   1        if(++motor_delay == 10) motor_delay = 0;
  110   1        if(++mpu6050_delay == 50) mpu6050_delay = 0;
  111   1        
  112   1        if(delay_cnt > 0) //延时函数
  113   1          delay_cnt--;
  114   1        
  115   1        if(++timer_delay > 10000)
  116   1        //Pwm_Fun();                 //pwm函数
  117   1        if(EC11_K==0)
  118   1        {
  119   2          long_short=1;          //编码器按下为0   
  120   2        }   
  121   1        if(long_short==1)         //进入计时的条件
  122   1        {
  123   2          s_count++;   
  124   2        }
C251 COMPILER V5.60.0,  main                                                               26/07/23  23:46:39  PAGE 3   

  125   1      } 
  126          
  127          
  128          //-----------------显示屏函数-----------------------------------
  129          void Disp_refresh(void)
  130          {
  131   1        if(disp_delay) return; //10ms刷新一次屏幕
  132   1        disp_delay = 1;
  133   1        
  134   1        sprintf(oled_showtext,"%d   ",line_inaccuracy);
  135   1        OLED_16x16(0,0,oled_showtext);
  136   1        
  137   1        sprintf(oled_showtext,"%3d,%3d       ",dutyR,dutyL);
  138   1        OLED_16x16(0,2,oled_showtext);
  139   1        
  140   1        sprintf(oled_showtext,"%3d",positionPID.basicSpeed);
  141   1        OLED_16x16(0,4,oled_showtext);
  142   1      
  143   1      //  sprintf(oled_showtext,"X:%3d Y:%3d     ",Angle_ax,Angle_ax);
  144   1      //  OLED_Display_string_5x7(0,6,oled_showtext);
  145   1        
  146   1        sprintf(oled_showtext,"Z:%02d       ",(int)AngleZ);
  147   1        OLED_Display_string_5x7(0,7,oled_showtext);
  148   1        
  149   1        //sprintf(txbuf,"X:%d Y:%d Z:%d\r\n",Gyro_x,Gyro_y,Gyro_z);
  150   1        //Uart_String(txbuf); //串口
  151   1        
  152   1      //  OLED_ShowNum(35,4,ADCP3,6);
  153   1      }
  154          
  155          
  156          
  157          
  158          //-----------------电机控制函数-------------------------------------
  159          void Motor_control(void)
  160          {
  161   1        if(motor_delay) return; //延时
  162   1        motor_delay = 1;
  163   1        
  164   1        line_inaccuracy = ReadLine();//读取循线状态 1、-1、0
  165   1        
  166   1        dutyR = positionPID.basicSpeed + line_inaccuracy*600; //右偏左偏
  167   1        dutyL = positionPID.basicSpeed - line_inaccuracy*600;
  168   1        
  169   1        Motor_FRcontrol(dutyR,dutyL);//pwm值小于0就反转，大于0正转
  170   1        
  171   1        Update_duty(motor_sw);//更新PWM输出
  172   1      }
  173          
  174          
  175          
  176          //-------------陀螺仪控制函数----------------------------------------
  177          void MPU6050_Read(void)
  178          {
  179   1        if(mpu6050_delay) return; 
  180   1        mpu6050_delay = 1;
  181   1        
  182   1        Read_MPU6050(MPU6050_DATA);
  183   1        Acc_x = MPU6050_DATA[0]<<8|MPU6050_DATA[1]; //加速度
  184   1        Acc_y = MPU6050_DATA[2]<<8|MPU6050_DATA[3];
  185   1        Acc_z = MPU6050_DATA[4]<<8|MPU6050_DATA[5];
  186   1        
  187   1        Temp  = MPU6050_DATA[6]<<8|MPU6050_DATA[7]; //temperature
  188   1        
  189   1        Gyro_x = MPU6050_DATA[8]<<8|MPU6050_DATA[9]; //角速度
  190   1        Gyro_y = MPU6050_DATA[10]<<8|MPU6050_DATA[11]; 
C251 COMPILER V5.60.0,  main                                                               26/07/23  23:46:39  PAGE 4   

  191   1        Gyro_z = MPU6050_DATA[12]<<8|MPU6050_DATA[13]; 
  192   1        
  193   1        if((Gyro_x == -1)||(Gyro_y == -1)||(Gyro_z == -1)||(Gyro_x == 0)||(Gyro_y == 0)||(Gyro_z == 0)) //高通滤
             -波
  194   1        {
  195   2          Gyro_x = Gyro_x_;
  196   2          Gyro_y = Gyro_y_;
  197   2          Gyro_z = Gyro_z_;
  198   2        }
  199   1        else 
  200   1        {
  201   2          Gyro_x_ = Gyro_x;
  202   2          Gyro_y_ = Gyro_y;
  203   2          Gyro_z_ = Gyro_z;
  204   2        }
  205   1        
  206   1        Angle_ax = Acc_x/8192.0; //偏移角
  207   1        Angle_ay = Acc_y/8192.0; 
  208   1        Angle_az = Acc_z/8192.0; 
  209   1        
  210   1        Angle_gx = Gyro_x/65.5; //
  211   1        Angle_gy = Gyro_y/65.5;
  212   1        Angle_gz = Gyro_z/65.5;
  213   1        
  214   1        IMUupdate(Angle_gx*0.0174533f,Angle_gy*0.0174533f,Angle_gz*0.0174533f,Angle_ax,Angle_ay,Angle_az);
  215   1        
  216   1        Angle_of_pitch = AngleX;
  217   1        Roll_Angle = AngleY;
  218   1        
  219   1        //==========串口查看波形=============
  220   1      //  Uart_sendbyte(0x03);
  221   1      //  Uart_sendbyte(~0x03); 
  222   1      //  
  223   1      ////  Uart_sendbyte((int)(Gyro_x));
  224   1      ////  Uart_sendbyte((int)(Gyro_x)>>8);
  225   1      ////                            
  226   1      ////  Uart_sendbyte((int)(Gyro_y));
  227   1      ////  Uart_sendbyte((int)(Gyro_y)>>8);
  228   1      ////                            
  229   1      ////  Uart_sendbyte((int)(Gyro_z));
  230   1      ////  Uart_sendbyte((int)(Gyro_z)>>8);
  231   1      //  
  232   1      ////  Uart_sendbyte((int)(Angle_gx));
  233   1      ////  Uart_sendbyte((int)(Angle_gx)>>8);
  234   1      ////                            
  235   1      ////  Uart_sendbyte((int)(Angle_gy));
  236   1      ////  Uart_sendbyte((int)(Angle_gy)>>8);
  237   1      ////                            
  238   1      ////  Uart_sendbyte((int)(Angle_gz));
  239   1      ////  Uart_sendbyte((int)(Angle_gz)>>8);
  240   1      
  241   1      //  Uart_sendbyte((int)(AngleX));
  242   1      //  Uart_sendbyte((int)(AngleX)>>8);
  243   1      //                            
  244   1      //  Uart_sendbyte((int)(AngleY));
  245   1      //  Uart_sendbyte((int)(AngleY)>>8);
  246   1      //                            
  247   1      //  Uart_sendbyte((int)(AngleZ));
  248   1      //  Uart_sendbyte((int)(AngleZ)>>8);  
  249   1      //  
  250   1      //  Uart_sendbyte(~0x03);         
  251   1      //  Uart_sendbyte(0x03);
  252   1      }
  253          
  254          void IMUupdate(float gx, float gy, float gz, float ax, float ay, float az)
  255          {
C251 COMPILER V5.60.0,  main                                                               26/07/23  23:46:39  PAGE 5   

  256   1        float data norm;
  257   1        float idata vx, vy, vz;
  258   1        float idata ex, ey, ez;
  259   1      
  260   1        norm = sqrt(ax*ax + ay*ay + az*az); //把加速度计的三维向量转成单维向量   
  261   1        ax = ax / norm;
  262   1        ay = ay / norm;
  263   1        az = az / norm;
  264   1      
  265   1          //  下面是把四元数换算成《方向余弦矩阵》中的第三列的三个元素。 
  266   1          //  根据余弦矩阵和欧拉角的定义，地理坐标系的重力向量，转到机体坐标系，正好是这三个元素
  267   1          //  所以这里的vx vy vz，其实就是当前的欧拉角（即四元数）的机体坐标参照系上，换算出来的
  268   1          //  重力单位向量。
  269   1        vx = 2*(q1*q3 - q0*q2);
  270   1        vy = 2*(q0*q1 + q2*q3);
  271   1        vz = q0*q0 - q1*q1 - q2*q2 + q3*q3 ;
  272   1      
  273   1        ex = (ay*vz - az*vy) ;
  274   1        ey = (az*vx - ax*vz) ;
  275   1        ez = (ax*vy - ay*vx) ;
  276   1      
  277   1        exInt = exInt + ex * Ki;
  278   1        eyInt = eyInt + ey * Ki;
  279   1        ezInt = ezInt + ez * Ki;
  280   1      
  281   1        gx = gx + Kp*ex + exInt;
  282   1        gy = gy + Kp*ey + eyInt;
  283   1        gz = gz + Kp*ez + ezInt;
  284   1      
  285   1        q0 = q0 + (-q1*gx - q2*gy - q3*gz) * halfT;
  286   1        q1 = q1 + ( q0*gx + q2*gz - q3*gy) * halfT;
  287   1        q2 = q2 + ( q0*gy - q1*gz + q3*gx) * halfT;
  288   1        q3 = q3 + ( q0*gz + q1*gy - q2*gx) * halfT;
  289   1      
  290   1        norm = sqrt(q0*q0 + q1*q1 + q2*q2 + q3*q3);
  291   1        q0 = q0 / norm;
  292   1        q1 = q1 / norm;
  293   1        q2 = q2 / norm;
  294   1        q3 = q3 / norm;
  295   1      
  296   1        AngleX = asin(2*(q0*q2 - q1*q3 )) * 57.2957795f; // 俯仰   换算成度
  297   1        AngleY = asin(2*(q0*q1 + q2*q3 )) * 57.2957795f; // 横滚
  298   1        AngleZ = atan2(2*(q1*q2 + q0*q3),q0*q0+q1*q1-q2*q2-q3*q3) * 57.2957795f; //滤波后的值
  299   1      }
  300          
  301          //  IT0=0;  //中断0    IT0=0;上升沿和下降沿触发   IT0=1 下降沿触发
  302          //  EX0=1;  //使能中断0
  303          //  IT1=0;  //中断0    IT0=0;上升沿和下降沿触发   IT0=1 下降沿触发
  304          //  EX1=1;  //使能中断0
  305          
  306          //add_loseit EC11_OLD_A;
  307          //add_loseit EC11_UP_A;
  308          //add_loseit EC11_DOWN_A
  309          //add_loseit EC11_OLD_add_lose;
  310          //void init0_Isr() interrupt 0
  311          //{
  312          //    IE1=0;
  313          //    EC11_UP_A=~EC11_A&(EC11_OLD_A^EC11_A);
  314          //    EC11_DOWN_A=EC11_A&(EC11_OLD_A^EC11_A)
  315          //    EC11_OLD_A=EC11_A;
  316          //    if(EC11_UP_A)
  317          //    {
  318          //      if(EC11_add_lose)
  319          //      {
  320          //        flag=1;
  321          //          t+=0.01;
C251 COMPILER V5.60.0,  main                                                               26/07/23  23:46:39  PAGE 6   

  322          //      
  323          //      }else{
  324          //        t-=0.01;
  325          //      }
  326          //    }
  327          //    if(EC11_DOWN_A)
  328          //    {
  329          //      if(EC11_add_lose==0)
  330          //      {
  331          //        flag=1;
  332          //          t-=0.01;
  333          //      
  334          //      }else{
  335          //        flag=1;
  336          //          t-=0.01;
  337          //      }
  338          //    }
  339          //}
  340          //void init1_Isr() interrupt 2
  341          //{
  342          //  IE0=0;
  343          //}
  344          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1962     ------
  ecode size           =    ------     ------
  data size            =         4     ------
  idata size           =         8          4
  pdata size           =    ------     ------
  xdata size           =        14     ------
  xdata-const size     =    ------     ------
  edata size           =       157         20
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       246     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
