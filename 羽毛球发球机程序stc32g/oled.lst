C251 COMPILER V5.60.0,  oled                                                               30/07/23  00:26:37  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE oled
OBJECT MODULE PLACED IN oled.obj
COMPILER INVOKED BY: D:\Software\Worksoftware\Keil5_C251\C251\BIN\C251.EXE OLED\oled.c XSMALL INTR2 WARNINGLEVEL(1) BROW
                    -SE INCDIR(.\OLED;.\timer;.\GPIO;.\PWM;.\Encoders;.\iic;.\Uart;.\Menu;.\motor;.\ADC;.\LineFollower;.\MPU6050) DEBUG PRINT
                    -(.\oled.lst) TABS(2) OBJECT(oled.obj) 

stmt  level    source

    1          #include "oled.h"
    2          
    3          void delay_ms(unsigned int ms)
    4          {                         
    5   1        unsigned int a;
    6   1        while(ms)
    7   1        {
    8   2          a=1800;
    9   2          while(a--);
   10   2          ms--;
   11   2        }
   12   1        return;
   13   1      }
   14          
   15          //反显函数
   16          void OLED_ColorTurn(uchar i)
   17          {
   18   1        if(i==0)
   19   1        {
   20   2          OLED_WR_Byte(0xA6,OLED_CMD);//正常显示
   21   2        }
   22   1        if(i==1)
   23   1        {
   24   2          OLED_WR_Byte(0xA7,OLED_CMD);//反色显示
   25   2        }
   26   1      }
   27          
   28          //屏幕旋转180度
   29          void OLED_DisplayTurn(uchar i)
   30          {
   31   1        if(i==0)
   32   1        {
   33   2          OLED_WR_Byte(0xC8,OLED_CMD);//正常显示
   34   2          OLED_WR_Byte(0xA1,OLED_CMD);
   35   2        }
   36   1        if(i==1)
   37   1        {
   38   2          OLED_WR_Byte(0xC0,OLED_CMD);//反转显示
   39   2          OLED_WR_Byte(0xA0,OLED_CMD);
   40   2        }
   41   1      }
   42          
   43          //开启OLED显示 
   44          void OLED_DisPlay_On(void)
   45          {
   46   1        OLED_WR_Byte(0x8D,OLED_CMD);//电荷泵使能
   47   1        OLED_WR_Byte(0x14,OLED_CMD);//开启电荷泵
   48   1        OLED_WR_Byte(0xAF,OLED_CMD);//点亮屏幕
   49   1      }
   50          
   51          //关闭OLED显示 
   52          void OLED_DisPlay_Off(void)
   53          {
   54   1        OLED_WR_Byte(0x8D,OLED_CMD);//电荷泵使能
   55   1        OLED_WR_Byte(0x10,OLED_CMD);//关闭电荷泵
   56   1        OLED_WR_Byte(0xAE,OLED_CMD);//关闭屏幕
   57   1      }
C251 COMPILER V5.60.0,  oled                                                               30/07/23  00:26:37  PAGE 2   

   58          
   59          
   60          //向SSD1306写入一个字节。
   61          //mode:数据/命令标志 0,表示命令;1,表示数据;
   62          void OLED_WR_Byte(uchar dat,uchar cmd)
   63          { 
   64   1        uchar i;        
   65   1        if(cmd)
   66   1        {
   67   2          OLED_DC_Set();
   68   2        }
   69   1        else 
   70   1        {
   71   2          OLED_DC_Clr();  
   72   2        }   
   73   1        OLED_CS_Clr();
   74   1        for(i=0;i<8;i++)
   75   1        {       
   76   2          OLED_SCL_Clr();
   77   2          if(dat&0x80)
   78   2          {
   79   3             OLED_SDA_Set();
   80   3          }
   81   2          else 
   82   2          {
   83   3             OLED_SDA_Clr();
   84   3          }
   85   2          OLED_SCL_Set();
   86   2          dat<<=1;   
   87   2        }             
   88   1        OLED_CS_Set();
   89   1        OLED_DC_Set();      
   90   1      }
   91          
   92          //清屏函数
   93          void OLED_Clear()
   94          {
   95   1        uchar i,n;
   96   1        for(i=0;i<8;i++)
   97   1        {
   98   2           OLED_WR_Byte(0xb0+i,OLED_CMD);//设置页地址
   99   2           OLED_WR_Byte(0x10,OLED_CMD);  //设置列地址的高4位
  100   2           OLED_WR_Byte(0x02,OLED_CMD);  //设置列地址的低4位
  101   2           for(n=0;n<128;n++)
  102   2           {
  103   3             OLED_WR_Byte(0x00,OLED_DATA);//清除所有数据
  104   3           }
  105   2        }
  106   1      }
  107          //函数功能： 清除箭头
  108          void OLED_Clear_0_2()      //清屏函数(只要列清除，页不用管)
  109          {
  110   1        uchar i=0,n=0;
  111   1        for(i=0;i<8;i++){
  112   2           OLED_WR_Byte(0xb0+i,OLED_CMD);//设置页地址
  113   2           OLED_WR_Byte(0x10,OLED_CMD);  //设置列地址的高4位
  114   2           OLED_WR_Byte(0x02,OLED_CMD);  //设置列地址的低4位
  115   2           for(n=0;n<16;n++){
  116   3             OLED_WR_Byte(0x00,OLED_DATA);//清除所有数据
  117   3           }
  118   2        }
  119   1      }
  120          //设置起始地址
  121          void OLED_address(uchar x,uchar y)
  122          {
  123   1        x+=2;
C251 COMPILER V5.60.0,  oled                                                               30/07/23  00:26:37  PAGE 3   

  124   1        OLED_WR_Byte(0xb0+y,OLED_CMD);              //设置页地址
  125   1        OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);  //设置列地址的高4位
  126   1        OLED_WR_Byte((x&0x0f),OLED_CMD);            //设置列地址的低4位
  127   1      }
  128          
  129          //显示128x64点阵图像
  130          void OLED_Display_128x64(uchar *dp)
  131          {
  132   1        uchar i=0,j=0;
  133   1        for(i=0;i<8;i++)
  134   1        {
  135   2          OLED_address(0,i);
  136   2          for(j=0;j<128;j++)
  137   2          {
  138   3            OLED_WR_Byte(*dp,OLED_DATA); //写数据到OLED,每写完一个8位的数据后列地址自动加1
  139   3            dp++;
  140   3          }
  141   2        }
  142   1      }
  143          
  144          //显示16x16点阵图像、汉字、生僻字或16x16点阵的其他图标
  145          void OLED_Display_16x16(uchar x,uchar y,uchar *dp)
  146          {
  147   1        uchar i,j;
  148   1        for(j=0;j<2;j++)
  149   1        {
  150   2          OLED_address(x,y);
  151   2          for(i=0;i<16;i++)
  152   2          {
  153   3            OLED_WR_Byte(*dp,OLED_DATA);  //写数据到OLED,每写完一个8位的数据后列地址自动加1
  154   3            dp++;
  155   3          }
  156   2          y++;
  157   2        }
  158   1      }
  159          
  160          //显示8x16点阵图像、ASCII, 或8x16点阵的自造字符、其他图标
  161          void OLED_Display_8x16(uchar x,uchar y,uchar *dp)
  162          {
  163   1        uchar i,j;
  164   1        for(j=0;j<2;j++)
  165   1        {
  166   2          OLED_address(x,y);
  167   2          for(i=0;i<8;i++)
  168   2          {
  169   3            OLED_WR_Byte(*dp,OLED_DATA);   //写数据到LCD,每写完一个8位的数据后列地址自动加1
  170   3            dp++;
  171   3          }
  172   2          y++;
  173   2        }
  174   1      }
  175          
  176          //显示5*7点阵图像、ASCII, 或5x7点阵的自造字符、其他图标
  177          void OLED_Display_5x7(uchar x,uchar y,uchar *dp)
  178          {
  179   1        uchar i;
  180   1        OLED_address(x,y);
  181   1        for(i=0;i<6;i++)
  182   1        {
  183   2          OLED_WR_Byte(*dp,OLED_DATA);//OLED_DATA 写数据
  184   2          dp++;
  185   2        }
  186   1      }
  187          
  188          //送指令到晶联讯字库IC
  189          void Send_Command_to_ROM(uchar dat)
C251 COMPILER V5.60.0,  oled                                                               30/07/23  00:26:37  PAGE 4   

  190          {
  191   1        uchar i;
  192   1        for(i=0;i<8;i++)
  193   1        {
  194   2          OLED_SCL_Clr();
  195   2          if(dat&0x80)
  196   2          {
  197   3            OLED_SDA_Set();
  198   3          }
  199   2          else
  200   2          {
  201   3            OLED_SDA_Clr();
  202   3          }
  203   2          dat<<=1;
  204   2          OLED_SCL_Set();
  205   2        }
  206   1      }
  207          
  208          //从晶联讯字库IC中取汉字或字符数据（1个字节）
  209          uchar Get_data_from_ROM()
  210          {
  211   1        uchar i=0,read=0;
  212   1        for(i=0;i<8;i++)
  213   1        {
  214   2          OLED_SCL_Clr();
  215   2          read<<=1;
  216   2          if(OLED_READ_FS0)
  217   2          {
  218   3            read++;
  219   3          }
  220   2          OLED_SCL_Set();
  221   2        }
  222   1        return read;
  223   1      }
  224          
  225          
  226          //从相关地址（addrHigh：地址高字节,addrMid：地址中字节,addrLow：地址低字节）中连续读出DataLen个字节的数据
             -到 pbuff的地址
  227          //连续读取
  228          void OLED_get_data_from_ROM(uchar addrHigh,uchar addrMid,uchar addrLow,uchar *pbuff,uchar DataLen)
  229          {
  230   1        uchar i;
  231   1        OLED_ROM_CS_Clr();
  232   1        Send_Command_to_ROM(0x03);
  233   1        Send_Command_to_ROM(addrHigh);
  234   1        Send_Command_to_ROM(addrMid);
  235   1        Send_Command_to_ROM(addrLow);
  236   1        for(i=0;i<DataLen;i++)
  237   1        {
  238   2          *(pbuff+i)=Get_data_from_ROM();
  239   2        }
  240   1        OLED_ROM_CS_Set();
  241   1      }
  242          
  243          
  244          ulong fontaddr=0;
  245          
  246          void OLED_16x16(uchar x,uchar y,uchar *text)   //16*16
  247          {
  248   1        uchar i=0;
  249   1        uchar addrHigh,addrMid,addrLow;
  250   1        uchar fontbuf[32];
  251   1        while(text[i]>0x00)
  252   1        {
  253   2          if((text[i]>=0xb0)&&(text[i]<=0xf7)&&(text[i+1]>=0xa1))
  254   2          {
C251 COMPILER V5.60.0,  oled                                                               30/07/23  00:26:37  PAGE 5   

  255   3            //国标简体（GB2312）汉字在晶联讯字库IC中的地址由以下公式来计算：
  256   3            //Address = ((MSB - 0xB0) * 94 + (LSB - 0xA1)+ 846)*32+ BaseAdd;BaseAdd=0
  257   3            //由于担心8位单片机有乘法溢出问题，所以分三部取地址
  258   3            fontaddr=(text[i]-0xb0)*94;
  259   3            fontaddr+=(text[i+1]-0xa1)+846;
  260   3            fontaddr=fontaddr*32;
  261   3            
  262   3            addrHigh=(fontaddr&0xff0000)>>16;   //地址的高8位,共24位
  263   3            addrMid=(fontaddr&0xff00)>>8;       //地址的中8位,共24位
  264   3            addrLow=(fontaddr&0xff);            //地址的低8位,共24位
  265   3            
  266   3            OLED_get_data_from_ROM(addrHigh,addrMid,addrLow,fontbuf,32);
  267   3            //取32个字节的数据，存到"fontbuf[32]"
  268   3            OLED_Display_16x16(x,y,fontbuf);
  269   3            //显示汉字到LCD上，y为页地址，x为列地址，fontbuf[]为数据
  270   3            x+=16;
  271   3            i+=2;
  272   3          }
  273   2          else if((text[i]>=0xa1)&&(text[i]<=0xa3)&&(text[i+1]>=0xa1))
  274   2          {
  275   3            
  276   3            fontaddr=(text[i]-0xa1)*94;
  277   3            fontaddr+=(text[i+1]-0xa1);
  278   3            fontaddr=fontaddr*32;
  279   3            
  280   3            addrHigh=(fontaddr&0xff0000)>>16;
  281   3            addrMid=(fontaddr&0xff00)>>8;
  282   3            addrLow=(fontaddr&0xff);
  283   3            
  284   3            OLED_get_data_from_ROM(addrHigh,addrMid,addrLow,fontbuf,32);
  285   3            OLED_Display_16x16(x,y,fontbuf);
  286   3            x+=16;
  287   3            i+=2;
  288   3          }
  289   2          else if((text[i]>=0x20)&&(text[i]<=0x7e))
  290   2          {
  291   3            unsigned char fontbuf[16];
  292   3            fontaddr=(text[i]-0x20);
  293   3            fontaddr=(unsigned long)(fontaddr*16);
  294   3            fontaddr=(unsigned long)(fontaddr+0x3cf80);
  295   3            
  296   3            addrHigh=(fontaddr&0xff0000)>>16;
  297   3            addrMid=(fontaddr&0xff00)>>8;
  298   3            addrLow=fontaddr&0xff;
  299   3            
  300   3            OLED_get_data_from_ROM(addrHigh,addrMid,addrLow,fontbuf,16);
  301   3            OLED_Display_8x16(x,y,fontbuf);
  302   3            x+=8;
  303   3            i+=1;
  304   3          }
  305   2          else 
  306   2            i++;
  307   2        }
  308   1      }
  309          
  310          void OLED_Display_string_5x7(uchar x,uchar y,uchar *text)   //字符串显示
  311          {
  312   1        uchar i=0;
  313   1        uchar addrHigh,addrMid,addrLow;
  314   1        while(text[i]>0x00)
  315   1        {
  316   2          if((text[i]>=0x20)&&(text[i]<=0x7e))
  317   2          {
  318   3            uchar fontbuf[8];
  319   3            fontaddr=(text[i]-0x20);
  320   3            fontaddr=(unsigned long)(fontaddr*8);
C251 COMPILER V5.60.0,  oled                                                               30/07/23  00:26:37  PAGE 6   

  321   3            fontaddr=(unsigned long)(fontaddr+0x3bfc0);
  322   3            
  323   3            addrHigh=(fontaddr&0xff0000)>>16;
  324   3            addrMid=(fontaddr&0xff00)>>8;
  325   3            addrLow=fontaddr&0xff;
  326   3            
  327   3            OLED_get_data_from_ROM(addrHigh,addrMid,addrLow,fontbuf,8);
  328   3            OLED_Display_5x7(x,y,fontbuf);
  329   3            x+=6;
  330   3            i+=1;
  331   3          }
  332   2          else 
  333   2            i++;
  334   2        }
  335   1      }
  336          
  337          //显示2个数字
  338          //x,y :起点坐标
  339          //num1：要显示的小数
  340          //len :数字的位数
  341          void OLED_ShowNum(uchar x,uchar y,float num1,uchar len)
  342          {
  343   1        uchar i=0;
  344   1        ulong t=0,num=0;
  345   1        x=x+len*8+8;//要显示的小数最低位的横坐标
  346   1        num=num1*100;//将小数左移两位并转化为整数
  347   1        OLED_16x16(x-24,y,".");//显示小数点
  348   1        for(i=0;i<len;i++)
  349   1        {
  350   2          t=num%10;//取个位数的数值
  351   2          num=num/10;//将整数右移一位
  352   2          x-=8;
  353   2          if(i==2){x-=8;}//当显示出来两个小数之后，空出小数点的位置
  354   2          switch(t)
  355   2          {
  356   3            case 0 :OLED_16x16(x,y,"0");break;
  357   3            case 1 :OLED_16x16(x,y,"1");break;
  358   3            case 2 :OLED_16x16(x,y,"2");break;
  359   3            case 3 :OLED_16x16(x,y,"3");break;
  360   3            case 4 :OLED_16x16(x,y,"4");break;
  361   3            case 5 :OLED_16x16(x,y,"5");break;
  362   3            case 6 :OLED_16x16(x,y,"6");break;
  363   3            case 7 :OLED_16x16(x,y,"7");break;
  364   3            case 8 :OLED_16x16(x,y,"8");break;
  365   3            case 9 :OLED_16x16(x,y,"9");break;
  366   3          }
  367   2        }
  368   1      }
  369          
  370          //OLED的初始化
  371          void OLED_Init(void)
  372          {
  373   1        
  374   1        OLED_CS_Set();
  375   1        OLED_ROM_CS_Set();
  376   1        delay_ms(200);
  377   1        OLED_WR_Byte(0xAE,OLED_CMD); /*display off*/ 
  378   1        OLED_WR_Byte(0x02,OLED_CMD); /*set lower column address*/ 
  379   1        OLED_WR_Byte(0x10,OLED_CMD); /*set higher column address*/ 
  380   1        OLED_WR_Byte(0x40,OLED_CMD); /*set display start line*/ 
  381   1        OLED_WR_Byte(0xB0,OLED_CMD); /*set page address*/
  382   1        OLED_WR_Byte(0x81,OLED_CMD); /*contract control*/ 
  383   1        OLED_WR_Byte(0xcf,OLED_CMD); /*128*/ 
  384   1        OLED_WR_Byte(0xA1,OLED_CMD); /*set segment remap*/ 
  385   1        OLED_WR_Byte(0xA6,OLED_CMD); /*normal / reverse*/ 
  386   1        OLED_WR_Byte(0xA8,OLED_CMD); /*multiplex ratio*/ 
C251 COMPILER V5.60.0,  oled                                                               30/07/23  00:26:37  PAGE 7   

  387   1        OLED_WR_Byte(0x3F,OLED_CMD); /*duty = 1/64*/ 
  388   1        OLED_WR_Byte(0xad,OLED_CMD); /*set charge pump enable*/ 
  389   1        OLED_WR_Byte(0x8b,OLED_CMD); /* 0x8B 内供 VCC */ 
  390   1        OLED_WR_Byte(0x33,OLED_CMD); /*0X30---0X33 set VPP 9V */ 
  391   1        OLED_WR_Byte(0xC8,OLED_CMD); /*Com scan direction*/ 
  392   1        OLED_WR_Byte(0xD3,OLED_CMD); /*set display offset*/ 
  393   1        OLED_WR_Byte(0x00,OLED_CMD); /* 0x20 */ 
  394   1        OLED_WR_Byte(0xD5,OLED_CMD); /*set osc division*/ 
  395   1        OLED_WR_Byte(0x80,OLED_CMD); 
  396   1        OLED_WR_Byte(0xD9,OLED_CMD); /*set pre-charge period*/ 
  397   1        OLED_WR_Byte(0x1f,OLED_CMD); /*0x22*/ 
  398   1        OLED_WR_Byte(0xDA,OLED_CMD); /*set COM pins*/ 
  399   1        OLED_WR_Byte(0x12,OLED_CMD); 
  400   1        OLED_WR_Byte(0xdb,OLED_CMD); /*set vcomh*/ 
  401   1        OLED_WR_Byte(0x40,OLED_CMD);
  402   1        OLED_Clear();
  403   1        OLED_WR_Byte(0xAF,OLED_CMD); /*display ON*/
  404   1      }
  405          
  406          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1996     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =         4         92
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        30     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
